{"version":3,"sources":["components/Header.js","components/Settings.js","components/Cell.js","components/Table.js","hooks/useSlider.js","hooks/useSearch.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","React","Component","Settings","_ref","rows","cols","onSliderChange","hide","inputVal","_useState","useState","_useState2","Object","slicedToArray","titles","updateTitles","htmlFor","type","name","min","max","value","onChange","e","concat","target","onClick","fetch","then","res","json","results","map","movie","original_title","Cell","toggle","url","setUrl","src","alt","poster_path","createTable","table","i","cells","j","push","components_Cell","Table","useSlider","setRows","_useState3","_useState4","setCols","useSearch","setHide","App","_useSlider","_useSearch","components_Header","components_Settings","components_Table","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.405e2f1b.chunk.js","sourcesContent":["import React from 'react';\n\nclass Header extends React.Component {\n  render() {\n    return (\n        <div className=\"header\">\n            <h1>Welcome to the movie poster collage maker</h1>\n            <p>Get started by clicking on one of the posters and searching for one of your favorite movies!</p>\n        </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, {useState} from 'react';\n\nfunction Settings({rows, cols, onSliderChange, hide}) {\n\n  let inputVal = \"\";\n  let [titles, updateTitles] = useState([]);\n\n  const onChange = (e) => {\n    inputVal = e.target.value;\n  }\n\n  const onSubmit = () => {\n    fetch(\"https://api.themoviedb.org/3/search/movie?api_key=ed07fde2a29e865fa73860b991476f93&language=en-US&query= \" + inputVal + \"&page=1&include_adult=false\")\n      .then((res) => res.json())\n      .then((res) => {\n        let titles = res.results.map(movie => <li> {movie.original_title} </li>);\n        updateTitles(titles);\n      })\n  }\n\n  return (\n    <div className=\"settings\">\n      <div className=\"container\">\n        <div className=\"slider\">\n          <label htmlFor=\"rows\">Number of Rows</label>\n          <input type=\"range\" name=\"rows\" min=\"1\" max=\"5\" value={rows} onChange={(e) => onSliderChange(e)}/>\n          {rows}\n        </div>\n        <div className=\"slider\">\n          <label htmlFor=\"cols\">Number of Columns</label>\n          <input type=\"range\" name=\"cols\" min=\"1\" max=\"8\" value={cols} onChange={(e) => onSliderChange(e)}/>\n          {cols}\n        </div>\n        <div className={`search ${hide ? \"show\" : \"\"}`}>\n          <input type=\"search\" name=\"search\" onChange={onChange}/> \n          <div className=\"submit\" onClick={onSubmit}>Submit</div>\n        </div>\n        <div className=\"results\">\n          <ul>\n            {titles}\n          </ul>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Settings;\n","import React, {useState} from 'react';\n\nfunction Cell({toggle}) {\n    const [url, setUrl] = useState(\"https://www.fillmurray.com/100/150\");\n    const BASE = \"http://image.tmdb.org/t/p/original/\"\n\n    const handleCellClick = () => {\n\n        toggle();\n\n        fetch(\"https://api.themoviedb.org/3/movie/550?api_key=ed07fde2a29e865fa73860b991476f93\")\n            .then(res => res.json())\n            .then(res => setUrl(BASE + res.poster_path))\n    }\n\n    return (\n        <div className=\"cell\">\n           <img src={url} alt=\"\" onClick={ handleCellClick }></img>\n        </div>\n    )\n}\n\nexport default Cell;","import React from 'react';\nimport Cell from './Cell';\n\nconst createTable = (cols, rows, toggle) => {\n  let table = [];\n\n  for(let i=0; i<rows; i++) {\n    \n    let cells = [];\n\n    for(let j=0; j<cols; j++){\n      cells.push(<Cell toggle={toggle}/>)\n    }\n\n    table.push(<div className=\"col\">{cells}</div>)\n\n  }\n\n  return table;\n}\n\n\nfunction Table({rows, cols, toggle}) {\n\n  return (\n    <div className=\"table\">\n      {createTable(rows, cols, toggle)}\n    </div>\n  );\n\n}\n\nexport default Table;\n","import {useState} from 'react';\n\nconst useSlider = (e) => {\n    const [rows, setRows] = useState(3);\n    const [cols, setCols] = useState(5);\n\n    function onSliderChange(e) {\n        if(e.target.name === \"rows\") {\n          setRows(e.target.value);\n        } else if(e.target.name === \"cols\") {\n          setCols(e.target.value);\n        }\n    }\n\n    return {\n        rows, \n        cols,\n        onSliderChange\n    }\n\n}\n\nexport default useSlider;\n\n\n","import {useState} from 'react';\n\nconst useSearch = () => {\n    const [hide, setHide] = useState(false);\n\n    function toggle() {\n        setHide(!hide);\n    }\n\n    return {\n        hide,\n        toggle\n    }\n\n}\n\nexport default useSearch;\n\n\n","import React, {useState} from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Settings from './components/Settings';\nimport Table from './components/Table';\nimport useSlider from './hooks/useSlider';\nimport useSearch from './hooks/useSearch';\nconst APIKey = \"ed07fde2a29e865fa73860b991476f93\";\n\nfunction App() {\n\n  const {rows, cols, onSliderChange} = useSlider();\n  const {hide, toggle} = useSearch();\n\n  return (\n      <div className=\"App\">\n        <Header/>\n        <Settings rows={rows} cols={cols} onSliderChange={onSliderChange} hide={hide}/>\n        <Table rows={rows} cols={cols} toggle={toggle}/>\n      </div>\n  )\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}